// Mocks generated by Mockito 5.1.0 from annotations
// in appsolute_news/test/news_feature/repository/news_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:appsolute_news/core/network/network_info.dart' as _i8;
import 'package:appsolute_news/ui/news_feature/data/datasources/news_local_data_source.dart'
    as _i5;
import 'package:appsolute_news/ui/news_feature/data/datasources/news_remote_data_source.dart'
    as _i3;
import 'package:appsolute_news/ui/news_feature/data/models/article_model.dart'
    as _i7;
import 'package:appsolute_news/ui/news_feature/data/models/articles_model.dart'
    as _i2;
import 'package:appsolute_news/ui/news_feature/data/models/favorite_article_model.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeArticlesModel_0 extends _i1.Fake implements _i2.ArticlesModel {}

/// A class which mocks [NewsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRemoteDataSource extends _i1.Mock
    implements _i3.NewsRemoteDataSource {
  MockNewsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.ArticlesModel> getAllNews(
          {int? page, String? category, String? language, String? searchFor}) =>
      (super.noSuchMethod(
              Invocation.method(#getAllNews, [], {
                #page: page,
                #category: category,
                #language: language,
                #searchFor: searchFor
              }),
              returnValue:
                  Future<_i2.ArticlesModel>.value(_FakeArticlesModel_0()))
          as _i4.Future<_i2.ArticlesModel>);
}

/// A class which mocks [NewsLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsLocalDataSource extends _i1.Mock
    implements _i5.NewsLocalDataSource {
  MockNewsLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.FavoriteArticleModel>> getAllCachedNews() =>
      (super.noSuchMethod(Invocation.method(#getAllCachedNews, []),
              returnValue: Future<List<_i6.FavoriteArticleModel>>.value(
                  <_i6.FavoriteArticleModel>[]))
          as _i4.Future<List<_i6.FavoriteArticleModel>>);
  @override
  _i4.Future<List<_i6.FavoriteArticleModel>> cacheNews(
          _i7.ArticleModel? articleModel) =>
      (super.noSuchMethod(Invocation.method(#cacheNews, [articleModel]),
              returnValue: Future<List<_i6.FavoriteArticleModel>>.value(
                  <_i6.FavoriteArticleModel>[]))
          as _i4.Future<List<_i6.FavoriteArticleModel>>);
  @override
  _i4.Future<List<_i6.FavoriteArticleModel>> deleteNews(
          {_i7.ArticleModel? articleModel}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteNews, [], {#articleModel: articleModel}),
              returnValue: Future<List<_i6.FavoriteArticleModel>>.value(
                  <_i6.FavoriteArticleModel>[]))
          as _i4.Future<List<_i6.FavoriteArticleModel>>);
  @override
  _i4.Future<void> deleteAllNews() =>
      (super.noSuchMethod(Invocation.method(#deleteAllNews, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> checkCachedArticle(_i7.ArticleModel? articleModel) => (super
      .noSuchMethod(Invocation.method(#checkCachedArticle, [articleModel]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i8.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
