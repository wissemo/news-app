// Mocks generated by Mockito 5.1.0 from annotations
// in appsolute_news/test/news_feature/view_model/articles_view_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:appsolute_news/core/errors/failures.dart' as _i5;
import 'package:appsolute_news/ui/news_feature/data/models/article_model.dart'
    as _i8;
import 'package:appsolute_news/ui/news_feature/data/models/articles_model.dart'
    as _i6;
import 'package:appsolute_news/ui/news_feature/data/models/favorite_article_model.dart'
    as _i7;
import 'package:appsolute_news/ui/news_feature/repository/news_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i3.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ArticlesModel>> getNews(
          {int? page, String? category, String? language, String? searchFor}) =>
      (super.noSuchMethod(
          Invocation.method(#getNews, [], {
            #page: page,
            #category: category,
            #language: language,
            #searchFor: searchFor
          }),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.ArticlesModel>>.value(
              _FakeEither_0<_i5.Failure, _i6.ArticlesModel>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.ArticlesModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.FavoriteArticleModel>>> cacheNews(
          {_i8.ArticleModel? articleModel}) =>
      (super.noSuchMethod(
          Invocation.method(#cacheNews, [], {#articleModel: articleModel}),
          returnValue: Future<
                  _i2.Either<_i5.Failure, List<_i7.FavoriteArticleModel>>>.value(
              _FakeEither_0<_i5.Failure, List<_i7.FavoriteArticleModel>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i7.FavoriteArticleModel>>>);
  @override
  _i4.Future<List<_i7.FavoriteArticleModel>> getCachedNews() =>
      (super.noSuchMethod(Invocation.method(#getCachedNews, []),
              returnValue: Future<List<_i7.FavoriteArticleModel>>.value(
                  <_i7.FavoriteArticleModel>[]))
          as _i4.Future<List<_i7.FavoriteArticleModel>>);
  @override
  _i4.Future<List<_i7.FavoriteArticleModel>> deleteCachedNews(
          {_i8.ArticleModel? articleModel}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #deleteCachedNews, [], {#articleModel: articleModel}),
              returnValue: Future<List<_i7.FavoriteArticleModel>>.value(
                  <_i7.FavoriteArticleModel>[]))
          as _i4.Future<List<_i7.FavoriteArticleModel>>);
  @override
  _i4.Future<bool> checkCachedArticle({_i8.ArticleModel? articleModel}) =>
      (super.noSuchMethod(
          Invocation.method(
              #checkCachedArticle, [], {#articleModel: articleModel}),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
